fn assert(expected: any, actual: any) -> unit {
 if (expected == actual) {
  print "Assertion truthy: " + expected;
 }
 if (expected != actual) {
  print "Assertion failed.";
  print "Expected: " + expected;
  print "Actual: " + actual;
 }
}

fn test_marker(test_name: string) -> unit {
 print "";
 print "";
 print "Now running: " + test_name;
}


test_marker("Variable");
let age = 76;
assert(76, age);

test_marker("Scope");
{
 let age = 1;
 assert(1, age);
}

test_marker("Assignment of scope (no output)");
let computed_age = {
 let age = 5;
 let thing = 6;
 let almost_there = age * 5 + thing;
 return almost_there / 2;
};

fn test(a: number, b: number) -> number {
 assert(11, a + b);
 return a + b + 1;
}

test_marker("Function");
let b = test(5, 6);
assert(12, b);

test_marker("Persistence and scoping of variables");
assert(76, age);
assert(15.5, computed_age);

test_marker("Boolean");
assert(false, 2.0 == 2.1);

test_marker("If statement");
if (age < computed_age) {
 print "!!!THIS SHOULDN'T  BE PRINTED!!!";
}

test_marker("Accessing outside variables from inside a scope");
if (age >= computed_age) {
 print "This should be printed";
 assert(computed_age, 15.5);
}

test_marker("String");
assert("HelloWorld", "Hello" + "World");

test_marker("Arrays & methods");
let arr = [1, true, "test"];


assert([1, true, "test"], arr);


assert(true, arr.get(1));


arr.push(5);
assert([1, true, "test", 5], arr);


arr.pop();
assert([1, true, "test"], arr);


arr.push(true);
arr.remove_element(true);
assert([1, "test", true], arr);


arr.remove(0);
assert(["test", true], arr);


assert(2, arr.length());


arr.set(1, false);
assert(["test", false], arr);


test_marker("While loop");
let output_arr = [];

let i = 0;
while (i < 5) {
  output_arr.push(i);
  i = i + 1;
}

assert([0, 1, 2, 3, 4], output_arr);